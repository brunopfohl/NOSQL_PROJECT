version: '3.8'

networks:
  mongodb-network:
    driver: bridge

volumes:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  shard2-1-data:
  shard2-2-data:
  shard2-3-data:
  shard3-1-data:
  shard3-2-data:
  shard3-3-data:
  cfgsvr1-data:
  cfgsvr2-data:
  cfgsvr3-data:
  cfgsvr1-config:
  cfgsvr2-config:
  cfgsvr3-config:
  mongos1-data:
  mongos2-data:

x-mongodb-config: &mongodb-config
  build:
    context: .
  networks:
    - mongodb-network

x-shard-node: &shard-node-base
  <<: *mongodb-config

services:
  # Config servers
  cfgsvr1:
    <<: *mongodb-config
    hostname: cfgsvr1
    container_name: cfg-node-a
    command: >-
      mongod --configsvr 
      --replSet cfgrs 
      --port 27019 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27119:27019"
    volumes:
      - cfgsvr1-data:/data/db
      - cfgsvr1-config:/data/configdb
      - ./scripts:/data/scripts
    healthcheck:
      test: |
        bash -c 'if mongosh --port 27019 --eval "db.adminCommand(\"ping\")" > /dev/null; then
          if mongosh --port 27019 --eval "rs.status().ok" | grep -q "1"; then
            exit 0;
          else
            mongosh --port 27019 < /data/scripts/init-configserver.js || exit 1;
          fi
        else
          exit 1;
        fi'
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 40s
    restart: always

  cfgsvr2:
    <<: *mongodb-config
    hostname: cfgsvr2
    container_name: cfg-node-b
    command: >-
      mongod --configsvr 
      --replSet cfgrs 
      --port 27019 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27219:27019"
    volumes:
      - cfgsvr2-data:/data/db
      - cfgsvr2-config:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  cfgsvr3:
    <<: *mongodb-config
    hostname: cfgsvr3
    container_name: cfg-node-c
    command: >-
      mongod --configsvr 
      --replSet cfgrs 
      --port 27019 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27319:27019"
    volumes:
      - cfgsvr3-data:/data/db
      - cfgsvr3-config:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  # Router nodes
  router1:
    <<: *mongodb-config
    hostname: router1
    container_name: router-01
    depends_on:
      cfgsvr1:
        condition: service_healthy
      cfgsvr2:
        condition: service_healthy
      cfgsvr3:
        condition: service_healthy
    command: >-
      mongos
      --configdb cfgrs/cfgsvr1:27019,cfgsvr2:27019,cfgsvr3:27019
      --bind_ip_all
      --port 27017
      --keyFile /data/mongodb-keyfile
    ports:
      - "27017:27017"
    volumes:
      - mongos1-data:/data/db
      - ./scripts:/data/scripts
    healthcheck:
      test: |
        bash -c 'if mongosh --eval "db.adminCommand(\"ping\")" > /dev/null; then
          mongosh < /data/scripts/init-router.js || exit 1;
        else
          exit 1;
        fi'
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 40s
    restart: always

  router2:
    <<: *mongodb-config
    hostname: router2
    container_name: router-02
    depends_on:
      cfgsvr1:
        condition: service_healthy
      cfgsvr2:
        condition: service_healthy
      cfgsvr3:
        condition: service_healthy
    command: >-
      mongos
      --configdb cfgrs/cfgsvr1:27019,cfgsvr2:27019,cfgsvr3:27019
      --bind_ip_all
      --port 27017
      --keyFile /data/mongodb-keyfile
    ports:
      - "27018:27017"
    volumes:
      - mongos2-data:/data/db
    restart: always

  # Shard 1
  shard1-1:
    <<: *shard-node-base
    hostname: shard1-1
    container_name: shard-01-node-a
    depends_on:
      shard1-2:
        condition: service_healthy
      shard1-3:
        condition: service_healthy
    healthcheck:
      test: |
        bash -c 'if mongosh --eval "db.adminCommand(\"ping\")" > /dev/null; then
          if mongosh --eval "rs.status().ok" | grep -q "1"; then
            exit 0;
          else
            mongosh < /data/scripts/init-shard1.js || exit 1;
          fi
        else
          exit 1;
        fi'
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard1rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27122:27017"
    volumes:
      - shard1-1-data:/data/db
      - ./scripts:/data/scripts
    links:
      - shard1-2
      - shard1-3
    restart: always

  shard1-2:
    <<: *shard-node-base
    hostname: shard1-2
    container_name: shard-01-node-b
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard1rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27123:27017"
    volumes:
      - shard1-2-data:/data/db
    restart: always

  shard1-3:
    <<: *shard-node-base
    hostname: shard1-3
    container_name: shard-01-node-c
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard1rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27124:27017"
    volumes:
      - shard1-3-data:/data/db
    restart: always

  # Shard 2
  shard2-1:
    <<: *shard-node-base
    hostname: shard2-1
    container_name: shard-02-node-a
    depends_on:
      shard2-2:
        condition: service_healthy
      shard2-3:
        condition: service_healthy
    healthcheck:
      test: |
        bash -c 'if mongosh --eval "db.adminCommand(\"ping\")" > /dev/null; then
          if mongosh --eval "rs.status().ok" | grep -q "1"; then
            exit 0;
          else
            mongosh < /data/scripts/init-shard2.js || exit 1;
          fi
        else
          exit 1;
        fi'
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard2rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27125:27017"
    volumes:
      - shard2-1-data:/data/db
      - ./scripts:/data/scripts
    links:
      - shard2-2
      - shard2-3
    restart: always

  shard2-2:
    <<: *shard-node-base
    hostname: shard2-2
    container_name: shard-02-node-b
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard2rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27126:27017"
    volumes:
      - shard2-2-data:/data/db
    restart: always

  shard2-3:
    <<: *shard-node-base
    hostname: shard2-3
    container_name: shard-02-node-c
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard2rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27127:27017"
    volumes:
      - shard2-3-data:/data/db
    restart: always

  # Shard 3
  shard3-1:
    <<: *shard-node-base
    hostname: shard3-1
    container_name: shard-03-node-a
    depends_on:
      shard3-2:
        condition: service_healthy
      shard3-3:
        condition: service_healthy
    healthcheck:
      test: |
        bash -c 'if mongosh --eval "db.adminCommand(\"ping\")" > /dev/null; then
          if mongosh --eval "rs.status().ok" | grep -q "1"; then
            exit 0;
          else
            mongosh < /data/scripts/init-shard3.js || exit 1;
          fi
        else
          exit 1;
        fi'
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard3rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27128:27017"
    volumes:
      - shard3-1-data:/data/db
      - ./scripts:/data/scripts
    links:
      - shard3-2
      - shard3-3
    restart: always

  shard3-2:
    <<: *shard-node-base
    hostname: shard3-2
    container_name: shard-03-node-b
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard3rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27129:27017"
    volumes:
      - shard3-2-data:/data/db
    restart: always

  shard3-3:
    <<: *shard-node-base
    hostname: shard3-3
    container_name: shard-03-node-c
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    command: >-
      mongod --replSet shard3rs 
      --shardsvr 
      --port 27017 
      --bind_ip_all
      --keyFile /data/mongodb-keyfile
    ports:
      - "27130:27017"
    volumes:
      - shard3-3-data:/data/db
    restart: always